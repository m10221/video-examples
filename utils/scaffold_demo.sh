#!/usr/bin/env bash
# Scaffold a new demo directory pre-wired with the shared order service app
#
# Usage:
#   utils/scaffold_demo.sh --name my-demo [--port 5000] [--service-name my-demo-order-service]
#                          [--collector host|service] [--collector-service-name otel-collector]
#
# Examples:
#   utils/scaffold_demo.sh --name my-demo
#   utils/scaffold_demo.sh --name my-demo --port 5001 --service-name cart --collector service --collector-service-name otel-collector
#
# Notes:
# - Creates: <name>/app/ with app.py, Dockerfile, requirements.txt
# - Generates: <name>/docker-compose.yaml and <name>/README.md
# - Collector endpoint modes:
#     host    -> http://host.docker.internal:4317 (default)
#     service -> http://<collector-service-name>:4317

set -euo pipefail

# Defaults
NAME=""
PORT="5000"
SERVICE_NAME="my-demo-order-service"
COLLECTOR_MODE="host"           # host|service
COLLECTOR_SERVICE_NAME="otel-collector"

print_help() {
  sed -n '1,60p' "$0" | sed 's/^# \{0,1\}//'
}

# Parse args
while [[ $# -gt 0 ]]; do
  case "$1" in
    --name)
      NAME="$2"; shift 2 ;;
    --port)
      PORT="$2"; shift 2 ;;
    --service-name)
      SERVICE_NAME="$2"; shift 2 ;;
    --collector)
      COLLECTOR_MODE="$2"; shift 2 ;;
    --collector-service-name)
      COLLECTOR_SERVICE_NAME="$2"; shift 2 ;;
    -h|--help)
      print_help; exit 0 ;;
    *)
      echo "Unknown argument: $1" >&2; echo; print_help; exit 1 ;;
  esac
done

if [[ -z "$NAME" ]]; then
  echo "Error: --name is required" >&2
  echo
  print_help
  exit 1
fi

DEMO_DIR="$NAME"
if [[ -e "$DEMO_DIR" ]]; then
  echo "Error: target directory already exists: $DEMO_DIR" >&2
  exit 1
fi

# Determine collector endpoint
if [[ "$COLLECTOR_MODE" == "service" ]]; then
  OTLP_ENDPOINT="http://$COLLECTOR_SERVICE_NAME:4317"
else
  OTLP_ENDPOINT="http://host.docker.internal:4317"
fi

# Create directories
mkdir -p "$DEMO_DIR/app"

# Copy app sources (only what's needed)
cp -v apps/order-service-flask/app.py "$DEMO_DIR/app/app.py"
cp -v apps/order-service-flask/Dockerfile "$DEMO_DIR/app/Dockerfile"
cp -v apps/order-service-flask/requirements.txt "$DEMO_DIR/app/requirements.txt"

# Create docker-compose.yaml
cat > "$DEMO_DIR/docker-compose.yaml" <<EOF
services:
  order-service:
    build:
      context: ./app
    ports:
      - "$PORT:5000"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=$OTLP_ENDPOINT
      - OTEL_SERVICE_NAME=$SERVICE_NAME
      - CONFIG_TYPE=no
      - ENVIRONMENT=$NAME-env
    depends_on: []
EOF

# Create README.md
cat > "$DEMO_DIR/README.md" <<'EOF'
# Demo Scaffold

This directory was generated by `utils/scaffold_demo.sh`.

## Run

```bash
docker compose up -d --build
```

App will be available at http://localhost:PORT (replace PORT with the host port defined in docker-compose).

## Configure Collector

The app exports traces to the OTLP gRPC endpoint defined in `docker-compose.yaml` via `OTEL_EXPORTER_OTLP_ENDPOINT`.

If you are running a collector outside this compose project (on the host), the scaffold sets it to `http://host.docker.internal:4317`.
If you are running the collector as another service in the same compose, switch the endpoint to `http://otel-collector:4317` (or the service name you use).

## Apply Collector Configs (optional)

Use the generic utility to copy a collector config into this demo and restart the collector service:

```bash
./utils/apply_collector_config.sh \
  --example-dir <this-demo-dir> \
  --config ./ottl-intro/otel-collector-config-ottl-demo.yaml \
  --services "otel-collector" 
```

## Customize
- Change port mapping if running multiple demos
- Set a unique `OTEL_SERVICE_NAME` to distinguish traces
- Adjust `OTEL_EXPORTER_OTLP_ENDPOINT` based on collector location
EOF

echo "\nScaffold created at: $DEMO_DIR"
echo "- App: $DEMO_DIR/app/"
echo "- Compose: $DEMO_DIR/docker-compose.yaml"
echo "- README: $DEMO_DIR/README.md"
